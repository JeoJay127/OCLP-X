name: CI - Build wxPython

on:
  workflow_dispatch:

permissions:
  contents: write
  deployments: write
  
jobs:
  build:
    name: Build wxPython
    runs-on: macos-13
    if: github.repository_owner == 'JeoJay127'

    env:
      branch: ${{ github.ref }}
      commiturl: ${{ github.event.head_commit.url || github.event.release.html_url }}
      commitdate: ${{ github.event.head_commit.timestamp || github.event.release.published_at }}
      ANALYTICS_KEY: ${{ secrets.ANALYTICS_KEY }}
      ANALYTICS_SITE: ${{ secrets.ANALYTICS_SITE }}

    steps:
      - uses: actions/checkout@v4
     
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11.9'

      - name: Install Dependencies
        run: python3 -m pip install --requirement requirements.txt

      - name: Force Universal2 charset for Python
        run: |
          python3 -m pip uninstall -y charset_normalizer
          python3 -m pip download --platform macosx_10_9_universal2 --only-binary=:all: charset-normalizer
          python3 -m pip install charset_normalizer-*-macosx_10_9_universal2.whl

      - name: Prepare Build Steps
        run: |
          python3 Build-Project.command --run-as-individual-steps --reset-dmg-cache --prepare-assets
          python3 Build-Project.command --git-branch "${{ env.branch }}" \
            --git-commit-url "${{ env.commiturl }}" --git-commit-date "${{ env.commitdate }}" \
            --analytics-key "${{ env.ANALYTICS_KEY }}" --analytics-endpoint "${{ env.ANALYTICS_SITE }}" \
            --reset-pyinstaller-cache --run-as-individual-steps --prepare-application
          python3 Build-Project.command --run-as-individual-steps --prepare-package

      - name: Prepare Release 
        id: parse_version
        run: |
           
            if [[ ! -f CHANGELOG.md ]]; then
              echo "CHANGELOG.md not found!" >&2
              exit 1
            fi

            LATEST_VERSION=$(grep -oE '^## [0-9]+\.[0-9]+\.[0-9]+' CHANGELOG.md | head -1 | awk '{print $2}') || { echo "Failed to retrieve version!" >&2; exit 1; }
            
            echo "new_version=$LATEST_VERSION" >> $GITHUB_ENV

            sed -n "/## $LATEST_VERSION/,/## [0-9]\+\.[0-9]\+\.[0-9]\+/ {
              /## $LATEST_VERSION/! { 
                /##/ { 
                  q 
                }
                p
              }
            }" CHANGELOG.md > release_notes.txt

            if [[ ! -s release_notes.txt ]]; then
              echo "Failed to extract release notes!" >&2
              exit 1
            fi

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.new_version }}
          name: ${{ env.new_version }}
          body_path: release_notes.txt
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            ./dist/AutoPkg-Assets.pkg
            ./dist/OpenCore-Patcher.pkg
            ./dist/OpenCore-Patcher-Uninstaller.pkg