name: Sync and Update

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 */3 * * *'
  workflow_dispatch:
  release:
    types: [published]

permissions:
  contents: write
  actions: write

jobs:
  check-updates:
    runs-on: macos-13
    outputs:
      has_updates: ${{ steps.check-updates.outputs.has_updates }}
    steps:
      - name: Check for updates
        id: check-updates
        run: |
          curl -s https://raw.githubusercontent.com/dortania/OpenCore-Legacy-Patcher/main/CHANGELOG.md -o upstream_CHANGELOG.md
          upstream_version=$(grep -E '^## [0-9]+\.[0-9]+\.[0-9]+' upstream_CHANGELOG.md | head -n 1 | awk '{print $2}')
          curl -s https://raw.githubusercontent.com/${{ github.repository }}/main/CHANGELOG.md -o local_CHANGELOG.md
          local_version=$(grep -m 1 '## ' local_CHANGELOG.md | cut -d ' ' -f 2)

          if [ "$local_version" = "$upstream_version" ]; then
            echo "No updates found."
            echo "has_updates=false" >> $GITHUB_OUTPUT
          else
            echo "Updates found: Local $local_version -> Upstream $upstream_version"
            echo "has_updates=true" >> $GITHUB_OUTPUT
          fi

  sync-and-build:
    needs: check-updates
    if: needs.check-updates.outputs.has_updates == 'true' || github.event_name == 'release'
    runs-on: macos-13
    concurrency:
      group: sync-and-build
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure upstream is set and fetch changes
        run: |
          if ! git remote | grep -q "upstream"; then
            git remote add upstream https://github.com/dortania/OpenCore-Legacy-Patcher.git
          fi
          git fetch upstream main

      - name: Remove Git index lock if exists
        run: |
          if [ -f .git/index.lock ]; then
            rm -f .git/index.lock
            echo "Removed existing .git/index.lock"
          fi
          sleep 2  

      - name: Merge upstream changes
        run: |
          git checkout main

          if ! git merge --strategy=recursive -X theirs --no-edit upstream/main; then
            echo "Merge encountered conflicts, attempting resolution..."
          fi
         
          if [[ -d .github/ ]]; then
            git checkout HEAD -- .github/
            git add .github/
          fi

          EXCLUDES=(
            "opencore_legacy_patcher/custom/"
            "opencore_legacy_patcher/__init__.py"
            "ci_tooling/privileged_helper_tool/com.dortania.opencore-legacy-patcher.privileged-helper"
            "README.md"
            "README_CN.md"
            "LICENSE"
          )

          for exclude in "${EXCLUDES[@]}"; do
            git checkout --ours "$exclude"
            git add "$exclude"
          done

          if git ls-files -u | grep -q "LICENSE.txt"; then
            git checkout --theirs LICENSE.txt
            git add LICENSE.txt
          fi

          git diff --name-only --diff-filter=U | while read -r file; do
            git checkout --theirs "$file"
            git add "$file"
          done

          if ! git diff --cached --quiet; then
            git commit -m "Merge upstream changes while preserving local modifications"
          fi

      - name: Push changes to origin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git push origin main

      - name: Trigger build
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: CI - Build wxPython
          token: ${{ secrets.GITHUB_TOKEN }}
